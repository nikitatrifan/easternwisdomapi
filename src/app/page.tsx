"use client";

import "normalize.css";
import "focus-visible";
import "../styles/globals.scss";

import { ArrowUpIcon, Button, Column, Inline, Text } from "junoblocks";
import { ContentContainer } from "./ContentContainer";
import { scrollToElement } from "@/utils/scrollToElement";
import { useEffect, useState } from "react";
import Head from "next/head";

const CLAUSES_GAP = 24;
const INNER_CLAUSES_GAP = 8;

const APP_NAME = "Peace App";

const CLAUSES = [
  [
    "Acceptance of Terms",
    `By accessing and using the ${APP_NAME} application, you accept and agree to be bound by the terms and provision of this agreement.`,
  ],
  [
    "Service Description",
    `${APP_NAME} provides general educational and informational content about mental freedom and peace, using a language model that generates responses based on ancient eastern wisdom dataset. These responses are not professional advice and should not be used as such.`,
  ],
  [
    "No Liability",
    `The content generated by the ${APP_NAME} app is purely for informational and educational purposes and does not constitute professional advice. You agree that you will not hold the creators, developers, or operators of the app responsible for any actions or decisions you make based on the information provided.`,
  ],
  [
    "No Guarantee",
    `The developers of ${APP_NAME} do not guarantee the accuracy, relevancy, reliability, or completeness of any information provided by the app.`,
  ],
  [
    "No Medical or Professional Advice",
    `The ${APP_NAME} app does not provide medical, legal, or professional advice. If you require such advice, please consult with a qualified professional.`,
  ],
  [
    "Indemnification",
    `You agree to indemnify and hold harmless the creators, developers, and operators of ${APP_NAME} from and against any and all claims, liabilities, damages, losses, costs, expenses, or fees (including reasonable attorneys' fees) that such parties may incur as a result of or arising from your (or anyone using your account’s) violation of these terms.`,
  ],
  [
    "Modifications",
    `The creators, developers, and operators of ${APP_NAME} reserve the right to change these terms and conditions at any time. We recommend that you periodically check this page for any changes. Your continued use of the app following the posting of changes to these terms will mean you accept those changes.`,
  ],
  [
    "Governing Law",
    `This Agreement shall be governed by and construed in accordance with the laws of the State of Texas, without regard to its conflict of laws rules.`,
  ],
  [
    "Jurisdiction",
    `You agree that any disputes arising out of or relating to the "Your App's Name" app or this agreement will be subject to the jurisdiction of the state and federal courts located within the State of Texas. You hereby consent and submit to the personal and exclusive jurisdiction of such courts for the purposes of litigating any such action.`,
  ],
  [
    "Dispute Resolution",
    `In the event of any controversy or dispute between you and "Your App's Name" arising out of or in connection with your use of the app, the parties shall attempt, promptly and in good faith, to resolve any such dispute. If we are unable to resolve any such dispute within a reasonable time (not to exceed thirty (30) days), then either party may submit such controversy or dispute to mediation. If the dispute cannot be resolved through mediation, then the parties shall be free to pursue any right or remedy available to them under applicable law.`,
  ],
];

export default function Terms() {
  const [scrollTopButtonVisible, setScrollTopButtonVisible] = useState(false);
  useEffect(() => {
    const scroller = document.querySelector("#scroller") as HTMLDivElement;
    function handleScroll() {
      setScrollTopButtonVisible(scroller.scrollTop > window.innerHeight * 0.05);
    }

    scroller.addEventListener("scroll", handleScroll);
    return () => scroller.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <>
      <Head>
        <title>Terms — World Class Interfaces Program</title>
      </Head>
      <Inline
        css={{
          position: "fixed",
          bottom: 0,
          left: 0,
          width: "100%",
          zIndex: "$3",
          opacity: scrollTopButtonVisible ? 1 : 0,
          padding: "$16 0",
          transition: "opacity .3s ease-out",
        }}
        justifyContent="center"
      >
        <Button
          variant="primary"
          iconLeft={<ArrowUpIcon />}
          onClick={() => scrollToElement("content")}
        >
          Go up
        </Button>
      </Inline>
      <ContentContainer
        css={{ paddingBottom: "$32", position: "relative", zIndex: "$1" }}
        size="small"
        id="content"
      >
        <Inline css={{ padding: "$32 0 $12" }}>
          <Text kind="symbol" variant="header">
            Peace app
          </Text>
        </Inline>

        <Text variant="hero" css={{ padding: "$8 0 $16" }}>
          Terms & Conditions
        </Text>

        <Column gap={CLAUSES_GAP}>
          <Column gap={INNER_CLAUSES_GAP}>
            <Text variant="header">Contents</Text>

            <Inline css={{ flexWrap: "wrap", rowGap: "$2" }} gap={2}>
              {CLAUSES.map(([clauseName]) => {
                return (
                  <Button
                    key={clauseName}
                    variant="ghost"
                    onClick={() => {
                      const node = document.querySelector(
                        `[data-name="${clauseName}"]`
                      ) as HTMLElement;
                      console.log({
                        node,
                      });
                      scrollToElement(node);
                    }}
                  >
                    {clauseName}
                  </Button>
                );
              })}
            </Inline>
          </Column>
          {CLAUSES.map(([clauseName, clauseContent]) => (
            <Column gap={INNER_CLAUSES_GAP} key={clauseName}>
              <Text variant="header" data-name={clauseName}>
                {clauseName}
              </Text>
              <Text variant="body">{clauseContent}</Text>
            </Column>
          ))}
        </Column>
      </ContentContainer>
    </>
  );
}
